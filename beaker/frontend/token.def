
// Defines a token.
#ifndef def_token
#  define def_token(K)
#endif

// Defines a token K having a single spelling S.
#ifndef def_singleton
#  define def_singleton(K, S) def_token(K)
#endif

// Defines a singleton K token whose spelling is also K. Keywords are a
// subset of identifiers.
#ifndef def_keyword
#  define def_keyword(K) def_singleton(K, #K)
#endif

// Defines a token that has multiple spellings.
#ifndef def_class
#  define def_class(K) def_token(K)
#endif

def_singleton(eof, "")

def_singleton(lparen, "(")
def_singleton(rparen, ")")
def_singleton(lbracket, "[")
def_singleton(rbracket, "]")
def_singleton(lbrace, "{")
def_singleton(rbrace, "}")
def_singleton(colon, ":")
def_singleton(semicolon, ";")
def_singleton(comma, ",")
def_singleton(dot, ".")

def_singleton(plus, "+")
def_singleton(dash, "-")
def_singleton(star, "*")
def_singleton(slash, "/")
def_singleton(percent, "%")

def_singleton(equal_equal, "==")
def_singleton(bang_equal, "!=")
def_singleton(less, "<")
def_singleton(greater, ">")
def_singleton(less_equal, "<=")
def_singleton(greater_equal, ">=")

def_singleton(amper, "&")
def_singleton(caret, "^")

def_singleton(equal, "=")

def_singleton(dash_greater, "->")
def_singleton(equal_greater, "=>")

def_keyword(and)
def_keyword(bool)
def_keyword(break)
def_keyword(case)
def_keyword(const)
def_keyword(continue)
def_keyword(do)
def_keyword(false)
def_keyword(for)
def_keyword(else)
def_keyword(if)
def_keyword(in)
def_keyword(int)
def_keyword(is)
def_keyword(lambda)
def_keyword(let)
def_keyword(not)
def_keyword(or)
def_keyword(return)
def_keyword(switch)
def_keyword(throw)
def_keyword(true)
def_keyword(type)
def_keyword(where)
def_keyword(while)

def_class(identifier)
def_class(integer)
def_class(invalid)

#undef def_token
#undef def_singleton
#undef def_symbol
#undef def_keyword
