
// def_syntax(T, K)
//
// The two parameters are the class name and the kind name. The latter is
// the same as the former, but lowercase.

#ifndef def_syntax
#  define def_syntax(T, K)
#endif

// Atomic nodes
def_syntax(Literal, literal)
def_syntax(Identifier, identifier)

// Lists, sequences, and enclosures
def_syntax(List, list)
def_syntax(Sequence, sequence)
def_syntax(Enclosure, enclosure)

// Unary prefix operators (e.g., ^t)
def_syntax(Prefix, prefix)

// Compound type constructors
def_syntax(Array, array)
def_syntax(Function, function)
def_syntax(Template, template)

// Unary postfix operators (e.g., e^)
def_syntax(Postfix, postfix)

// Compound application operators
def_syntax(Call, call)
def_syntax(Index, index)

// Infix binary operators (e.g., x + y).
def_syntax(Infix, infix)

// A triple of declarator, type, and definition.
def_syntax(Declaration, declaration)

// Top-level
def_syntax(File, file)

#undef def_syntax